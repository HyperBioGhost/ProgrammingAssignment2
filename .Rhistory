echo "Hellow World"
make.power  <- function (n) {}
View(make.power)
Edit(make.power)
View(make.power)
View(make.power)
make.power <- function (n) {
pow <- function (x) {
x^n
}
}
make.power(3)
class (make.power)
make.power(3)(3)
make.power(2)(3)
sq <- function() n*n
sq
n <- 3
sq
class(sq)
sq <- function() n*n {n}
make.power <- function (n) {
pow <- function (x) {
x^n
}
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
a  <- matrix(1:9,3,3)
z
a
makeCacheMatrix(a)
make.power <- function (n) {
pow <- function (x) {
x^n
}
}
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinverse <- function(inverse) i <<- inverse
getinverse <- function() i
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinverse(i)
i
}
makeCacheMatrix(a)
cacheSolve(a)
library(datasets)
data(iris)
?iris
iris
setwd("E:/git-hub/datasciencecoursera/Assignment_2/ProgrammingAssignment2")
## Put comments here that give an overall description of what your
## functions do
## makeCacheMatrix
makeCacheMatrix <- function(x = matrix(c(2,1,0,1), nrow = 2)) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinver <- function(inverse) i <<- inverse
getinver <- function() i
list( set = set,
get = get,
setinver = setinver,
getinver = getinver
) ##To pile the functions in a list to be called by using $
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
i <- x$getinver()
if(!is.null(i)) {
message("This is the cached data")
return(i)         ##Return the cached inverse
}
data <- x$get()
i <- solve(data, ...)
x$setinver(i)
i        ## Return a matrix that is the inverse of 'x'
}
makeCacheMatrix()
m  <- makeCacheMatrix()
m
cacheSolve(m)
cacheSolve(m)
## Following the example, makeCacheMatrix returns a list that contains functions
## which could set and read the inverse of a matrix to a
## functions do
## makeCacheMatrix creates by default a 2 by 2 square inversable matrix,
## and defines the functions set and read the inverse of the matrix.
makeCacheMatrix <- function(x = matrix(c(2,1,0,1), nrow = 2)) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinver <- function(inverse) i <<- inverse
getinver <- function() i
list( set = set,
get = get,
setinver = setinver,
getinver = getinver
) ##To pile the functions in a list to be called by using $
}
## cacheSolve actually calculates the inverse of a matrix
## and cache it by calling the setinver function defined above.
cacheSolve <- function(x, ...) {
i <- x$getinver()
if(!is.null(i)) {
message("This is the cached data")
return(i)         ##Return the cached inverse
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinver(i)
i        ## Return a matrix that is the inverse of 'x'
}
m <- makeCacheMatrix()
cacheSolve(m)
cacheSolve(m)
## Following the example, makeCacheMatrix returns a list that contains functions
## which could set and read the inverse of a matrix to variable i
## And cacheSolve would actully call solve function to calculate the inverse
## then cache it by calling setinver function from makeCacheMatrix
## makeCacheMatrix creates by default a 2 by 2 square invertible matrix,
## and defines the functions set and read the inverse of the matrix.
makeCacheMatrix <- function(x = matrix(c(4,3,3,2), nrow = 2)) {
i <- NULL
set <- function(y) {
x <<- y
i <<- NULL
}
get <- function() x
setinver <- function(inverse) i <<- inverse
getinver <- function() i
list( set = set,
get = get,
setinver = setinver,
getinver = getinver
) ##To pile the functions in a list to be called by using $
}
## cacheSolve actually calculates the inverse of a matrix
## and cache it by calling the setinver function defined above.
cacheSolve <- function(x, ...) {
i <- x$getinver()
if(!is.null(i)) {
message("This is the cached data")
return(i)         ##Return the cached inverse
}
matrix <- x$get()
i <- solve(matrix, ...)
x$setinver(i)
i        ## Return a matrix that is the inverse of 'x'
}
m <- makeCacheMatrix()
cacheSolve(m)
cacheSolve(m)
